<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Griffin.Networking.Protocol.Http</name>
    </assembly>
    <members>
        <member name="T:Griffin.Networking.Protocol.Http.BadRequestException">
            <summary>
            Request is malformed.
            </summary>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.HttpException">
            <summary>
            A HTTP exception
            </summary>
            <remarks>HTTP exceptions will automatically generate a custom error page with the specified status code,
            opposed to all other exceptions which will generate a Internal Server Error.</remarks>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.HttpException.StatusCode">
            <summary>
            Gets status code
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.BadRequestException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Protocol.Http.BadRequestException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.BadRequestException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Protocol.Http.BadRequestException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.BadRequestException.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*"/>
              </PermissionSet>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.HttpMessageBuilder">
            <summary>
            Builds HTTP messags from incoming bytes.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.HttpMessageBuilder.#ctor(Griffin.Networking.Buffers.IBufferSliceStack)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Protocol.Http.HttpMessageBuilder"/> class.
            </summary>
            <param name="stack">Slices are used when processing incoming data.</param>
            <example>
            <code>
            var builder = new HttpMessageBuilder(new BufferSliceStack(100, 65535)); 
            </code>
            </example>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.HttpMessageBuilder.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.HttpMessageBuilder.Append(Griffin.Networking.Buffers.IBufferReader)">
            <summary>
            Append more bytes to your message building
            </summary>
            <param name="reader">Contains bytes which was received from the other end</param>
            <returns><c>true</c> if a complete message has been built; otherwise <c>false</c>.</returns>
            <remarks>You must handle/read everything which is available in the buffer</remarks>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.HttpMessageBuilder.Griffin#Networking#Messaging#IMessageBuilder#TryDequeue(System.Object@)">
            <summary>
            Try to dequeue a message
            </summary>
            <param name="message">Message that the builder has built.</param>
            <returns><c>true</c> if a message was available; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.HttpMessageBuilder.Reset">
            <summary>
            Reset builder state
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.HttpMessageBuilder.TryDequeue(Griffin.Networking.Protocol.Http.Protocol.IMessage@)">
            <summary>
            Try to dequeue a message
            </summary>
            <param name="message">Message that the builder has built.</param>
            <returns><c>true</c> if a message was available; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.HttpMessageFactory">
            <summary>
            Used to convert byte[] arrays to/from HTTP messages.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.HttpMessageFactory.#ctor(Griffin.Networking.Buffers.IBufferSliceStack)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Protocol.Http.HttpMessageFactory"/> class.
            </summary>
            <param name="stack">Used to provide <c>byte[]</c> buffers to the workers..</param>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.HttpMessageFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Protocol.Http.HttpMessageFactory"/> class.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.HttpMessageFactory.CreateSerializer">
            <summary>
            Create a new serializer (used to convert messages to byte buffers)
            </summary>
            <returns>Created serializer</returns>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.HttpMessageFactory.CreateBuilder">
            <summary>
            Create a message builder (used to compose messages from byte buffers)
            </summary>
            <returns></returns>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.HttpMessageSerializer">
            <summary>
            Takes HTTP messages and serialize them into bytes.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.HttpMessageSerializer.Serialize(System.Object,Griffin.Networking.Buffers.IBufferWriter)">
            <summary>
            Serialize a message into something that can be transported over the socket.
            </summary>
            <param name="message">Message to serialize</param>
            <param name="writer">Buffer used to store the message</param>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.HttpService">
            <summary>
            Base class for handling HTTP requests in the server.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.HttpService.#ctor(Griffin.Networking.Buffers.IBufferSliceStack)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Protocol.Http.HttpService"/> class.
            </summary>
            <param name="sliceStack">Used to retreive the buffers which are used during message serialization. Make sure that each buffer is large enough to serialize all headers.</param>
            <exception cref="T:System.ArgumentNullException">sliceStack</exception>
            <remarks>You typically want to pass a <c>static</c> stack to this constructor if you want performance.</remarks>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.HttpService.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.HttpService.Assign(Griffin.Networking.Servers.IServerClientContext)">
            <summary>
            Assign the context which can be used to communicate with the client
            </summary>
            <param name="context">Context</param>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.HttpService.Griffin#Networking#Servers#INetworkService#HandleReceive(System.Object)">
            <summary>
            A new message have been received from the remote end.
            </summary>
            <param name="message">You'll receive <see cref="T:Griffin.Networking.Protocol.Http.Protocol.IRequest"/> or <see cref="T:Griffin.Networking.Protocol.Http.Protocol.IResponse"/> depending on the type of application.</param>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.HttpService.OnRequest(Griffin.Networking.Protocol.Http.Protocol.IRequest)">
            <summary>
            We've received a HTTP request.
            </summary>
            <param name="request">HTTP request</param>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.HttpService.OnUnhandledException(Griffin.Networking.Servers.ServiceExceptionContext)">
            <summary>
            An unhandled exception was caught when handling incoming bytes.
            </summary>
            <param name="context">Information about the exception that was caught</param>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.HttpService.Send(Griffin.Networking.Protocol.Http.Protocol.IMessage)">
            <summary>
            Send a HTTP message
            </summary>
            <param name="message">Message to send</param>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.HttpService.Context">
            <summary>
            Context  used to communicate with the client
            </summary>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Implementation.ByteRangeStream">
            <summary>
            Used to transfer a byte range
            </summary>
            <remarks>Will transfer the required ranges to the client. Do note that using multiple ranges means that the response will
            be sent as <c>multipart/byteranges</c>. You therefore have to set that header.</remarks>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.ByteRangeStream.#ctor(Griffin.Networking.Protocol.Http.Implementation.RangeCollection,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Protocol.Http.Implementation.ByteRangeStream"/> class.
            </summary>
            <param name="ranges">The HTTP range header contents.</param>
            <param name="innerStream">The inner stream which we should transfer a range from. The stream is owned by this class.</param>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.ByteRangeStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.ByteRangeStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
            <exception cref="T:System.NotSupportedException">You may not seek in this stream. The ranges are handled internally.</exception>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.ByteRangeStream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.NotSupportedException">You may not set length for this stream. The ranges are handled internally.</exception>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.ByteRangeStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">count;Tried to read more than was configured for the range.</exception>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.ByteRangeStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.NotSupportedException">This stream should only be used to read ranges.</exception>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.ByteRangeStream.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
            <returns>true if the stream supports reading; otherwise, false.</returns>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.ByteRangeStream.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
            <returns>always false.</returns>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.ByteRangeStream.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
            <returns>always false.</returns>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.ByteRangeStream.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
            <returns>A long value representing the length of the stream in bytes.</returns>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.ByteRangeStream.Position">
            <summary>
            Gets the position in the ranges to send
            </summary>
            <returns>The current position within the stream.</returns>
            <exception cref="T:System.NotSupportedException">this stream can only be used to read ranges.</exception>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Implementation.HeaderEventArgs">
            <summary>
            A new HTTP header has been parsed.
            </summary>
            <see cref="E:Griffin.Networking.Protocol.Http.Implementation.HttpHeaderParser.HeaderParsed"/>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.HeaderEventArgs.Set(System.String,System.String)">
            <summary>
            Set new header
            </summary>
            <param name="name">Header name</param>
            <param name="value">Header value</param>
            <remarks>Invoked by the parser so that we don't have to create a new EventArgs for each new parsed header.</remarks>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.HeaderEventArgs.Value">
            <summary>
            Gets header value (unmodified)
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.HeaderEventArgs.Name">
            <summary>
            Gets header name
            </summary>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Implementation.HttpCookieParser">
            <summary>
            Parses a request cookie header value.
            </summary>
            <remarks>This class is not thread safe.</remarks>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.HttpCookieParser.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Protocol.Http.Implementation.HttpCookieParser"/> class.
            </summary>
            <param name="headerValue">The header value.</param>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.HttpCookieParser.Parse">
            <summary>
            Parse cookie string
            </summary>
            <returns>A generated cookie collection.</returns>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Implementation.Infrastructure.ReaderResult">
            <summary>
            Result from <see cref="M:Griffin.Networking.Protocol.Http.Implementation.Infrastructure.TextReaderExtensions.ReadToEnd(System.IO.TextReader,System.String)"/>
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.Infrastructure.ReaderResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Protocol.Http.Implementation.Infrastructure.ReaderResult"/> class.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.Infrastructure.ReaderResult.Value">
            <summary>
            Value read
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.Infrastructure.ReaderResult.Delimiter">
            <summary>
            Found delimiter
            </summary>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Implementation.Infrastructure.TextReaderExtensions">
            <summary>
            Extensions for the standard text reader
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.Infrastructure.TextReaderExtensions.ReadToEnd(System.IO.TextReader,System.String)">
            <summary>
            </summary>
            <param name="reader"></param>
            <param name="delimiters"></param>
            <returns></returns>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Implementation.Range">
            <summary>
            Represents a HTTP range.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.Range.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Protocol.Http.Implementation.Range"/> class.
            </summary>
            <param name="position">The position to start at in the stream/file.</param>
            <param name="count">Number of bytes in this range.</param>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.Range.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Protocol.Http.Implementation.Range"/> class.
            </summary>
            <param name="range">The range <c>"bytes "</c> should not be included.</param>
            <param name="streamLength">Total size of stream/file</param>
            <example>
            Last 100 bytes
            <code>
            -100
            </code>
            Specific range 
            <code>
            100-199
            </code>
            From index 200 and the rest
            <code>
            200-
            </code>
            </example>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.Range.Read(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads from the specified stream and puts the content in the specified byte buffer.
            </summary>
            <param name="source">Read the range from this stream.</param>
            <param name="buffer">Buffer to copy stream bytes to.</param>
            <param name="offset">The offset in the buffer to start writing.</param>
            <param name="count">Number of bytes available to write to in the buffer.</param>
            <returns></returns>
            <remarks>The stream must support seeking since this method will move to our range position before
            start reading. Do note that the move is only made for the first read. Make sure that the position isn't changed until
            everything have been read in this range.</remarks>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.Range.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.Range.IsDone">
            <summary>
            Gets value indicating if everything have been read using the <see cref="M:Griffin.Networking.Protocol.Http.Implementation.Range.Read(System.IO.Stream,System.Byte[],System.Int32,System.Int32)"/> method.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.Range.Count">
            <summary>
            Gets number of bytes to read
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.Range.EndPosition">
            <summary>
            Gets where to stop read
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.Range.Position">
            <summary>
            Gets start position
            </summary>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Implementation.RangeCollection">
            <summary>
            Collection of ranges which have been specified in the Range header.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.RangeCollection.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.RangeCollection.Parse(System.String,System.Int32)">
            <summary>
            Parse range header value
            </summary>
            <param name="header">The "Range" header value</param>
            <param name="streamLength">File size (or size of the entire stream)</param>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.RangeCollection.ToHtmlHeaderValue(System.Int32)">
            <summary>
            Create a string which is valid as value in the Content-Range header.
            </summary>
            <param name="streamLength">Length of the stream.</param>
            <returns></returns>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.RangeCollection.TotalLength">
            <summary>
            Total length of all ranges (i.e. the number of bytes to transfer)
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.RangeCollection.Item(System.Int32)">
            <summary>
            Get one of the ranges.
            </summary>
            <param name="index">Zero based index</param>
            <returns>Range</returns>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.RangeCollection.Count">
            <summary>
            Gets number of ranges
            </summary>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Implementation.RequestLineEventArgs">
            <summary>
            The Request line has been parsed (first line in a HTTP request)
            </summary>
            <see cref="E:Griffin.Networking.Protocol.Http.Implementation.HttpHeaderParser.RequestLineParsed"/>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.RequestLineEventArgs.Verb">
            <summary>
            Gets HTTP verb such as "POST"
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.RequestLineEventArgs.Url">
            <summary>
            Gets requested URL (without domain etc)
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.RequestLineEventArgs.HttpVersion">
            <summary>
            Gets http version (for instance "HTTP/1.1")
            </summary>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Pipeline.Handlers.AuthenticationHandler">
            <summary>
            Takes care of authentication through <see cref="T:Griffin.Networking.Protocol.Http.Services.Authentication.IAuthenticator"/> and user management through <see cref="T:Griffin.Networking.Protocol.Http.Services.Authentication.IPrincipalFactory"/>.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Pipeline.Handlers.AuthenticationHandler.#ctor(Griffin.Networking.Protocol.Http.Services.Authentication.IAuthenticator,Griffin.Networking.Protocol.Http.Services.Authentication.IPrincipalFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Protocol.Http.Pipeline.Handlers.AuthenticationHandler"/> class.
            </summary>
            <param name="authenticator">The authenticator.</param>
            <param name="principalFactory">Used to generate the principal which is set for the current thread</param>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Pipeline.Handlers.AuthenticationHandler.HandleDownstream(Griffin.Networking.Pipelines.IPipelineHandlerContext,Griffin.Networking.Pipelines.IPipelineMessage)">
            <summary>
            Process message
            </summary>
            <param name="context"></param>
            <param name="message"></param>
            <remarks>
            Should always call either <see cref="M:Griffin.Networking.Pipelines.IPipelineHandlerContext.SendDownstream(Griffin.Networking.Pipelines.IPipelineMessage)"/> or <see cref="M:Griffin.Networking.Pipelines.IPipelineHandlerContext.SendUpstream(Griffin.Networking.Pipelines.IPipelineMessage)"/>
            unless the handler really wants to stop the processing.
            </remarks>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Pipeline.Handlers.AuthenticationHandler.HandleUpstream(Griffin.Networking.Pipelines.IPipelineHandlerContext,Griffin.Networking.Pipelines.IPipelineMessage)">
            <summary>
            Handle an message
            </summary>
            <param name="context">Context unique for this handler instance</param>
            <param name="message">Message to process</param>
            <remarks>
            All messages that can't be handled MUST be send up the chain using <see cref="M:Griffin.Networking.Pipelines.IPipelineHandlerContext.SendUpstream(Griffin.Networking.Pipelines.IPipelineMessage)"/>.
            </remarks>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Pipeline.Handlers.BodyDecoder">
            <summary>
            Can decode bodies.
            </summary>
            <remarks>
            <para>
            Will not pass on the <see cref="T:Griffin.Networking.Protocol.Http.Pipeline.Messages.ReceivedHttpRequest"/> message until the body have been parsed successfully.
            </para>
            <para>
             The decoder uses a BufferPool buffer to host the body contents.The decoder will switch to <see cref="T:System.IO.FileStream"/> for bodies larger than the <c>bufferSize</c> contructor parameter.
            This will of course hurt performance but keep the memory usage per request down.
            </para>
            </remarks>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Pipeline.Handlers.BodyDecoder.#ctor(Griffin.Networking.Protocol.Http.Services.IBodyDecoder,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Protocol.Http.Pipeline.Handlers.BodyDecoder"/> class.
            </summary>
            <param name="decoderService">The decoder service.</param>
            <param name="bufferSize">Buffer size of each buffer in the pool. Read the remarks at <see cref="T:Griffin.Networking.Protocol.Http.Pipeline.Handlers.BodyDecoder"/></param>
            <param name="sizeLimit">Maximum size of the body in bytes. Larger content will generate a <see cref="F:System.Net.HttpStatusCode.RequestEntityTooLarge"/> response which will
            be sent back to the client.</param>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Pipeline.Handlers.BodyDecoder.#ctor(Griffin.Networking.Protocol.Http.Services.IBodyDecoder,Griffin.Networking.Buffers.IBufferSliceStack,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Protocol.Http.Pipeline.Handlers.BodyDecoder"/> class.
            </summary>
            <param name="decoderService">The decoder service.</param>
            <param name="bufferSliceStack">Used to provide buffers used when decoding the body</param>
            <param name="sizeLimit">Maximum size of the body in bytes. Larger content will generate a <see cref="F:System.Net.HttpStatusCode.RequestEntityTooLarge"/> response which will
            be sent back to the client.</param>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Pipeline.Handlers.BodyDecoder.HandleUpstream(Griffin.Networking.Pipelines.IPipelineHandlerContext,Griffin.Networking.Pipelines.IPipelineMessage)">
            <summary>
            Handle an message
            </summary>
            <param name="context">Context unique for this handler instance</param>
            <param name="message">Message to process</param>
            <remarks>
            All messages that can't be handled MUST be send up the chain using <see cref="M:Griffin.Networking.Pipelines.IPipelineHandlerContext.SendUpstream(Griffin.Networking.Pipelines.IPipelineMessage)"/>.
            </remarks>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Pipeline.Handlers.BodyDecoder.ParseBody(Griffin.Networking.Buffers.IBufferReader)">
            <summary>
            Parser method to copy all body bytes.
            </summary>
            <param name="reader"> </param>
            <returns></returns>
            <remarks>Needed since a TCP packet can contain multiple messages
            after each other, or partial messages.</remarks>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Pipeline.Handlers.BufferTracer">
            <summary>
            Writes  content to the log
            </summary>
            <remarks>
            Should be the first up handler and/or the last downstream handler.
            </remarks>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Pipeline.Handlers.BufferTracer.HandleDownstream(Griffin.Networking.Pipelines.IPipelineHandlerContext,Griffin.Networking.Pipelines.IPipelineMessage)">
            <summary>
            Process message
            </summary>
            <param name="context"></param>
            <param name="message"></param>
            <remarks>
            Should always call either <see cref="M:Griffin.Networking.Pipelines.IPipelineHandlerContext.SendDownstream(Griffin.Networking.Pipelines.IPipelineMessage)"/> or <see cref="M:Griffin.Networking.Pipelines.IPipelineHandlerContext.SendUpstream(Griffin.Networking.Pipelines.IPipelineMessage)"/>
            unless the handler really wants to stop the processing.
            </remarks>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Pipeline.Handlers.BufferTracer.HandleUpstream(Griffin.Networking.Pipelines.IPipelineHandlerContext,Griffin.Networking.Pipelines.IPipelineMessage)">
            <summary>
            Handle an message
            </summary>
            <param name="context">Context unique for this handler instance</param>
            <param name="message">Message to process</param>
            <remarks>
            All messages that can't be handled MUST be send up the chain using <see cref="M:Griffin.Networking.Pipelines.IPipelineHandlerContext.SendUpstream(Griffin.Networking.Pipelines.IPipelineMessage)"/>.
            </remarks>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Pipeline.Handlers.HttpErrorHandler">
            <summary>
            Pipeline handler catching unhandled exceptions
            </summary>
            <remarks>
            <para>
            The handler uses try/catch around <c>context.SendUpstream</c> which allows it to catch any unhandled
            exceptions that all upstreams handler after this one throws. It then logs the exception, all request parameters and finally invokes the 
            <see cref="T:Griffin.Networking.Protocol.Http.Services.Errors.IErrorFormatter"/> before sending the response back to the client.
            </para>
            <para>Should typically be placed right after the <see cref="T:Griffin.Networking.Protocol.Http.Pipeline.Handlers.HeaderDecoder"/> in the pipeline</para>
            <para>
            You need to implement your own adapter for the <see cref="T:Griffin.Networking.Logging.LogManager"/> to receive all errors.
            </para>
            </remarks>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Pipeline.Handlers.HttpErrorHandler.#ctor(Griffin.Networking.Protocol.Http.Services.Errors.IErrorFormatter)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Protocol.Http.Pipeline.Handlers.HttpErrorHandler"/> class.
            </summary>
            <param name="formatter">Used to format the response using the uncaught exception.</param>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Pipeline.Handlers.HttpErrorHandler.HandleUpstream(Griffin.Networking.Pipelines.IPipelineHandlerContext,Griffin.Networking.Pipelines.IPipelineMessage)">
            <summary>
            Handle an message
            </summary>
            <param name="context">Context unique for this handler instance</param>
            <param name="message">Message to process</param>
            <remarks>
            All messages that can't be handled MUST be send up the chain using <see cref="M:Griffin.Networking.Pipelines.IPipelineHandlerContext.SendUpstream(Griffin.Networking.Pipelines.IPipelineMessage)"/>.
            </remarks>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Pipeline.Handlers.HttpErrorHandler.LogError(Griffin.Networking.Protocol.Http.Protocol.IRequest,System.Exception)">
            <summary>
            Logs the error.
            </summary>
            <param name="request">Request that failed</param>
            <param name="err">Exception which was thrown</param>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Pipeline.Handlers.HttpErrorHandler.FormatException(Griffin.Networking.Protocol.Http.Protocol.IResponse,Griffin.Networking.Protocol.Http.Pipeline.Messages.ReceivedHttpRequest,Griffin.Networking.Protocol.Http.HttpException)">
            <summary>
            Invokes the <see cref="M:Griffin.Networking.Protocol.Http.Services.Errors.IErrorFormatter.Format(Griffin.Networking.Protocol.Http.Services.Errors.ErrorFormatterContext)"/> and guards against any exceptions that it might throw.
            </summary>
            <param name="response">Response to send back</param>
            <param name="msg">Request pipeline message</param>
            <param name="exception">Caught exception</param>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Implementation.HttpHeaderSerializer">
            <summary>
            Can serialize HTTP headers
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.HttpHeaderSerializer.SerializeResponse(Griffin.Networking.Protocol.Http.Protocol.IResponse,Griffin.Networking.Buffers.IBufferWriter)">
            <summary>
            Send all headers to the client
            </summary>
            <param name="response">Response containing call headers.</param>
            <param name="writer">Writer to write everything to</param>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Pipeline.Handlers.IScopeListener">
            <summary>
            Implemented by the inversion of control container adapter to create child containers.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Pipeline.Handlers.IScopeListener.ScopeStarted(System.Object)">
            <summary>
            A request scope should be created
            </summary>
            <param name="id">ID identifying the scope</param>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Pipeline.Handlers.IScopeListener.ScopeEnded(System.Object)">
            <summary>
            A scope haver ended.
            </summary>
            <param name="id">Same id as in <see cref="M:Griffin.Networking.Protocol.Http.Pipeline.Handlers.IScopeListener.ScopeStarted(System.Object)"/></param>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Implementation.HttpHeaderParser">
            <summary>
            Parser for the HTTP header
            </summary>
            <remarks>Parses everything in the header including the seperator line between the header and body. i.e. The next available byte
            in the buffer is the first body byte.</remarks>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.HttpHeaderParser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Protocol.Http.Implementation.HttpHeaderParser"/> class.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.HttpHeaderParser.Parse(Griffin.Networking.Buffers.IBufferReader)">
            <summary>
            Will try to parse everything in the buffer
            </summary>
            <param name="reader">Reader to read from.</param>
            <remarks><para>Do note that the parser is for the header only. The <see cref="E:Griffin.Networking.Protocol.Http.Implementation.HttpHeaderParser.Completed"/> event will
            indicate that there might be body bytes left in the buffer. You have to handle them by yourself.</para></remarks>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.HttpHeaderParser.Reset">
            <summary>
            Reset parser state
            </summary>
        </member>
        <member name="E:Griffin.Networking.Protocol.Http.Implementation.HttpHeaderParser.Completed">
            <summary>
            The header part of the request/response has been parsed successfully. The remaining bytes is for the body
            </summary>
        </member>
        <member name="E:Griffin.Networking.Protocol.Http.Implementation.HttpHeaderParser.HeaderParsed">
            <summary>
            We've parsed a header and it's value.
            </summary>
        </member>
        <member name="E:Griffin.Networking.Protocol.Http.Implementation.HttpHeaderParser.RequestLineParsed">
            <summary>
            We've parsed a request line, meaning that all headers is for a HTTP Request.
            </summary>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Pipeline.Handlers.PipelineFailureHandler">
            <summary>
            Used to catch all <see cref="T:Griffin.Networking.Pipelines.Messages.PipelineFailure"/> and unhandled <see cref="T:Griffin.Networking.Protocol.Http.Pipeline.Messages.ReceivedHttpRequest"/>.
            </summary>
            <remarks>
            <para>
            
            </para>
            Should be the last handler to be able to detect unhandled HTTP requests and to generate errors for all
            unprocessed <see cref="T:Griffin.Networking.Pipelines.Messages.PipelineFailure"/>
            </remarks>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Pipeline.Handlers.PipelineFailureHandler.HandleUpstream(Griffin.Networking.Pipelines.IPipelineHandlerContext,Griffin.Networking.Pipelines.IPipelineMessage)">
            <summary>
            Handle an message
            </summary>
            <param name="context">Context unique for this handler instance</param>
            <param name="message">Message to process</param>
            <remarks>
            All messages that can't be handled MUST be send up the chain using <see cref="M:Griffin.Networking.Pipelines.IPipelineHandlerContext.SendUpstream(Griffin.Networking.Pipelines.IPipelineMessage)"/>.
            </remarks>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Pipeline.Handlers.HeaderDecoder">
            <summary>
            Parses the HTTP header and passes on a constructed message
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Pipeline.Handlers.HeaderDecoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Protocol.Http.Pipeline.Handlers.HeaderDecoder"/> class.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Pipeline.Handlers.HeaderDecoder.HandleUpstream(Griffin.Networking.Pipelines.IPipelineHandlerContext,Griffin.Networking.Pipelines.IPipelineMessage)">
            <summary>
            Handle an message
            </summary>
            <param name="context">Context unique for this handler instance</param>
            <param name="message">Message to process</param>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Pipeline.Handlers.RequestScope">
            <summary>
            Used to provide a request scope (typically used by inversion of control containers)
            </summary>
            <remarks>Should be the first and the last handlers in a queue</remarks>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Pipeline.Handlers.RequestScope.#ctor(Griffin.Networking.Protocol.Http.Pipeline.Handlers.IScopeListener)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Protocol.Http.Pipeline.Handlers.RequestScope"/> class.
            </summary>
            <param name="listener">The listener.</param>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Pipeline.Handlers.RequestScope.HandleDownstream(Griffin.Networking.Pipelines.IPipelineHandlerContext,Griffin.Networking.Pipelines.IPipelineMessage)">
            <summary>
            Process message
            </summary>
            <param name="context"></param>
            <param name="message"></param>
            <remarks>
            Should always call either <see cref="M:Griffin.Networking.Pipelines.IPipelineHandlerContext.SendDownstream(Griffin.Networking.Pipelines.IPipelineMessage)"/> or <see cref="M:Griffin.Networking.Pipelines.IPipelineHandlerContext.SendUpstream(Griffin.Networking.Pipelines.IPipelineMessage)"/>
            unless the handler really wants to stop the processing.
            </remarks>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Pipeline.Handlers.RequestScope.HandleUpstream(Griffin.Networking.Pipelines.IPipelineHandlerContext,Griffin.Networking.Pipelines.IPipelineMessage)">
            <summary>
            Handle an message
            </summary>
            <param name="context">Context unique for this handler instance</param>
            <param name="message">Message to process</param>
            <remarks>
            All messages that can't be handled MUST be send up the chain using <see cref="M:Griffin.Networking.Pipelines.IPipelineHandlerContext.SendUpstream(Griffin.Networking.Pipelines.IPipelineMessage)"/>.
            </remarks>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Pipeline.Handlers.ResponseEncoder">
            <summary>
            Encode message to something that can be sent over the wire.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Pipeline.Handlers.ResponseEncoder.HandleDownstream(Griffin.Networking.Pipelines.IPipelineHandlerContext,Griffin.Networking.Pipelines.IPipelineMessage)">
            <summary>
            Process message
            </summary>
            <param name="context"></param>
            <param name="message"></param>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Implementation.HttpCookie">
            <summary>
            Create a new HTTP cookie
            </summary>
            <remarks>Typically a request cookie, since response cookies need more information.</remarks>
            <seealso cref="T:Griffin.Networking.Protocol.Http.Implementation.HttpResponseCookie"/>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Protocol.IHttpCookie">
            <summary>
            A cookie
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Protocol.IHttpCookie.Name">
            <summary>
            Gets the cookie identifier.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Protocol.IHttpCookie.Value">
            <summary>
            Gets value. 
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.HttpCookie.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Protocol.Http.Implementation.HttpCookie"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.HttpCookie.Name">
            <summary>
            Gets the cookie identifier.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.HttpCookie.Value">
            <summary>
            Gets value. 
            </summary>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Implementation.HttpCookieCollection`1">
            <summary>
            A collection of HTTP cookies
            </summary>
            <typeparam name="T">Type of cookie</typeparam>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Protocol.IHttpCookieCollection`1">
            <summary>
            Collection of cookies
            </summary>
            <typeparam name="T">Type of cookie</typeparam>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Protocol.IHttpCookieCollection`1.Add(`0)">
            <summary>
            Add a cookie.
            </summary>
            <param name="cookie">Cookie to add</param>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Protocol.IHttpCookieCollection`1.Clear">
            <summary>
            Remove all cookies.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Protocol.IHttpCookieCollection`1.Remove(System.String)">
            <summary>
            Remove a cookie from the collection.
            </summary>
            <param name="cookieName">Name of cookie.</param>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Protocol.IHttpCookieCollection`1.Count">
            <summary>
            Gets the count of cookies in the collection.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Protocol.IHttpCookieCollection`1.Item(System.String)">
            <summary>
            Gets the cookie of a given identifier (<c>null</c> if not existing).
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.HttpCookieCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.HttpCookieCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.HttpCookieCollection`1.Add(`0)">
            <summary>
            Adds the specified cookie.
            </summary>
            <param name="cookie">The cookie.</param>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.HttpCookieCollection`1.Clear">
            <summary>
            Remove all cookies.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.HttpCookieCollection`1.Remove(System.String)">
            <summary>
            Remove a cookie from the collection.
            </summary>
            <param name="cookieName">Name of cookie.</param>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.HttpCookieCollection`1.Count">
            <summary>
            Gets the count of cookies in the collection.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.HttpCookieCollection`1.Item(System.String)">
            <summary>
            Gets the cookie of a given identifier (<c>null</c> if not existing).
            </summary>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Protocol.IHttpFileCollection">
            <summary>
            Collection of iles
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Protocol.IHttpFileCollection.Contains(System.String)">
            <summary>
            Checks if a file exists.
            </summary>
            <param name="name">Name of the file (form item name)</param>
            <returns></returns>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Protocol.IHttpFileCollection.Add(Griffin.Networking.Protocol.Http.Protocol.IHttpFile)">
            <summary>
            Add a new file.
            </summary>
            <param name="file">File to add.</param>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Protocol.IHttpFileCollection.Clear">
            <summary>
            Remove all files from disk.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Protocol.IHttpFileCollection.Item(System.String)">
            <summary>
            Get a file
            </summary>
            <param name="name">Name in form</param>
            <returns>File if found; otherwise <c>null</c>.</returns>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Protocol.IHttpFileCollection.Count">
            <summary>
            Gets number of files
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.HttpFileCollection.Contains(System.String)">
            <summary>
            Checks if a file exists.
            </summary>
            <param name="name">Name of the file (form item name)</param>
            <returns></returns>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.HttpFileCollection.Add(Griffin.Networking.Protocol.Http.Protocol.IHttpFile)">
            <summary>
            Add a new file.
            </summary>
            <param name="file">File to add.</param>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.HttpFileCollection.Clear">
            <summary>
            Remove all files from disk.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.HttpFileCollection.Item(System.String)">
            <summary>
            Get a file
            </summary>
            <param name="name">Name in form</param>
            <returns>File if found; otherwise <c>null</c>.</returns>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.HttpFileCollection.Count">
            <summary>
            Gets number of files
            </summary>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Protocol.IHeaderItem">
            <summary>
            Header in a message
            </summary>
            <remarks>
            Important! Each header should override ToString() 
            and return it's data correctly formatted as a HTTP header value.
            </remarks>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Protocol.IHeaderItem.Is(System.String)">
            <summary>
            Does a case insensitive compare with the specified value
            </summary>
            <param name="value">Value to compare our value with</param>
            <returns>true if equal; otherwase false;</returns>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Protocol.IHeaderItem.HasParameter(System.String)">
            <summary>
            Checks if the header has the specified parameter
            </summary>
            <param name="name">Parameter name</param>
            <returns>true if equal; otherwase false;</returns>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Protocol.IHeaderItem.GetParameter(System.String)">
            <summary>
            Get a parameter from the header
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Protocol.IHeaderItem.Name">
            <summary>
            Gets header name
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Protocol.IHeaderItem.Value">
            <summary>
            Gets value as it would be sent back to client.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.HttpHeaderItem.Is(System.String)">
            <summary>
            Does a case insensitive compare with the specified value
            </summary>
            <param name="value">Value to compare our value with</param>
            <returns>true if equal; otherwase false;</returns>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.HttpHeaderItem.HasParameter(System.String)">
            <summary>
            Checks if the header has the specified parameter
            </summary>
            <param name="name">Parameter name</param>
            <returns>true if equal; otherwase false;</returns>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.HttpHeaderItem.GetParameter(System.String)">
            <summary>
            Get a parameter from the header
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.HttpHeaderItem.Name">
            <summary>
            Gets header name
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.HttpHeaderItem.Value">
            <summary>
            Gets value as it would be sent back to client.
            </summary>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Protocol.IHeaderCollection">
            <summary>
            Collection of headers.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Protocol.IHeaderCollection.Item(System.String)">
            <summary>
            Gets a header
            </summary>
            <param name="name">header name.</param>
            <returns>value if found; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.HttpHeaderCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.HttpHeaderCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.HttpHeaderCollection.Item(System.String)">
            <summary>
            Gets a header
            </summary>
            <param name="name">header name.</param>
            <returns>value if found; otherwise <c>null</c>.</returns>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Implementation.HttpMessage">
            <summary>
            Base class for HTTP messages
            </summary>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Protocol.IMessage">
            <summary>
            Base interface for request and response.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Protocol.IMessage.AddHeader(System.String,System.String)">
            <summary>
            Add a new header
            </summary>
            <param name="name">HTTP header name</param>
            <param name="value">Value</param>
            <remarks>Adding an existing header will result in that both values will be merged (comma seperated)</remarks>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Protocol.IMessage.ProtocolVersion">
            <summary>
            Gets current protocol version
            </summary>
            <value>
            Default is HTTP/1.1
            </value>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Protocol.IMessage.Body">
            <summary>
            Gets or sets body stream.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Protocol.IMessage.ContentLength">
            <summary>
            Gets number of bytes in the body
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Protocol.IMessage.ContentEncoding">
            <summary>
            Gets or sets content encoding
            </summary>
            <remarks>Appended to the contentType header as "charset" parameter.</remarks>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Protocol.IMessage.Headers">
            <summary>
            Gets headers.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.HttpMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Protocol.Http.Implementation.HttpMessage"/> class.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.HttpMessage.AddHeader(System.String,System.String)">
            <summary>
            Add a new header
            </summary>
            <param name="name">Name of the header</param>
            <param name="value">Value</param>
            <remarks>Adding a header which already exists will just append the value to that header.</remarks>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.HttpMessage.ProtocolVersion">
            <summary>
            Gets current protocol version
            </summary>
            <value>
            Default is HTTP/1.1
            </value>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.HttpMessage.Body">
            <summary>
            Gets or sets body stream (null per default unless it's a request where a body where sent)
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.HttpMessage.ContentLength">
            <summary>
            Gets number of bytes in the body
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.HttpMessage.ContentEncoding">
            <summary>
            Gets or sets content encoding
            </summary>
            <remarks>Appended to the contentType header as "charset" parameter.</remarks>
            <value>Default is UTF8</value>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.HttpMessage.Headers">
            <summary>
            Gets headers.
            </summary>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Implementation.HttpRequest">
            <summary>
            HTTTP request implementation
            </summary>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Protocol.IRequest">
            <summary>
            Request sent to/from a HTTP server.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Protocol.IRequest.CreateResponse(System.Net.HttpStatusCode,System.String)">
            <summary>
            Create a response for the request.
            </summary>
            <param name="code">Status code</param>
            <param name="reason">Gives the remote end point a hint to why the specified status code as used.</param>
            <returns>Created response</returns>
            <remarks>Can be used by implementations to transfer context specific information. It's prefered that you use this method
            instead of instantianting a response directly.</remarks>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Protocol.IRequest.KeepAlive">
            <summary>
            Gets or sets if connection is being kept alive
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Protocol.IRequest.ContentType">
            <summary>
            Gets content type
            </summary>
            <remarks>Any extra parameters are stripped. Use <see cref="P:Griffin.Networking.Protocol.Http.Protocol.IMessage.Headers"/> to get the raw value</remarks>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Protocol.IRequest.Cookies">
            <summary>
            Gets cookies.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Protocol.IRequest.Files">
            <summary>
            Gets all uploaded files.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Protocol.IRequest.Form">
            <summary>
            Gets form parameters.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Protocol.IRequest.RemoteEndPoint">
            <summary>
            Gets where the request originated from.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Protocol.IRequest.IsAjax">
            <summary>
            Gets if request is an Ajax request.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Protocol.IRequest.Method">
            <summary>
            Gets or sets HTTP method.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Protocol.IRequest.QueryString">
            <summary>
            Gets query string.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Protocol.IRequest.Uri">
            <summary>
            Gets requested URI.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.HttpRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Protocol.Http.Implementation.HttpRequest"/> class.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.HttpRequest.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Protocol.Http.Implementation.HttpRequest"/> class.
            </summary>
            <param name="httpMethod">The HTTP method like "POST" or "GET".</param>
            <param name="url">The url path including query string.</param>
            <param name="httpVersion">The HTTP version. Typically "HTTP/1.1"</param>
            <exception cref="T:System.ArgumentNullException">httpMethod</exception>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.HttpRequest.CreateResponse(System.Net.HttpStatusCode,System.String)">
            <summary>
            Create a response for the request.
            </summary>
            <param name="code">Status code</param>
            <param name="reason">Gives the remote end point a hint to why the specified status code as used.</param>
            <returns>Created response</returns>
            <remarks>Can be used by implementations to transfer context specific information. It's prefered that you use this method
            instead of instantianting a response directly.</remarks>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.HttpRequest.AddHeader(System.String,System.String)">
            <summary>
            Add a new header
            </summary>
            <param name="name">Name of the header</param>
            <param name="value">Value</param>
            <remarks>
            Adding a header which already exists will just append the value to that header.
            </remarks>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.HttpRequest.KeepAlive">
            <summary>
            Gets or sets if connection is being kept alive
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.HttpRequest.ContentType">
            <summary>
            Gets content type
            </summary>
            <remarks>Any extra parameters are stripped. Use <see cref="!:Headers"/> to get the raw value</remarks>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.HttpRequest.Cookies">
            <summary>
            Gets cookies.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.HttpRequest.Files">
            <summary>
            Gets all uploaded files.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.HttpRequest.Form">
            <summary>
            Gets form parameters.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.HttpRequest.RemoteEndPoint">
            <summary>
            Gets where the request originated from.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.HttpRequest.IsAjax">
            <summary>
            Gets if request is an Ajax request.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.HttpRequest.Method">
            <summary>
            Gets or sets HTTP method.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.HttpRequest.QueryString">
            <summary>
            Gets query string.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.HttpRequest.Uri">
            <summary>
            Gets requested URI.
            </summary>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Implementation.HttpResponse">
            <summary>
            HTTP response implementation.
            </summary>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Protocol.IResponse">
            <summary>
            Response to a request.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Protocol.IResponse.Redirect(System.String)">
            <summary>
            Redirect user.
            </summary>
            <param name="uri">Where to redirect to.</param>
            <remarks>
            Any modifications after a redirect will be ignored.
            </remarks>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Protocol.IResponse.KeepAlive">
            <summary>
            Gets or set if connection should be kept alive.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Protocol.IResponse.Cookies">
            <summary>
            Gets cookies.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Protocol.IResponse.StatusDescription">
            <summary>
            Gets a motivation to why the specified status code were selected.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Protocol.IResponse.StatusCode">
            <summary>
            Status code that is sent to the client.
            </summary>
            <remarks>Default is <see cref="F:System.Net.HttpStatusCode.OK"/></remarks>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Protocol.IResponse.ContentType">
            <summary>
             Gets or sets content type
            </summary>
             <remarks>Only the mime type</remarks>
             <seealso cref="P:Griffin.Networking.Protocol.Http.Protocol.IMessage.ContentEncoding"/>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.HttpResponse.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Protocol.Http.Implementation.HttpResponse"/> class.
            </summary>
            <param name="httpVersion">The HTTP version ("HTTP/1.1").</param>
            <param name="code">HTTP status code.</param>
            <param name="reason">Reason to why that specific code was used..</param>
            <exception cref="T:System.ArgumentNullException">httpVersion</exception>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.HttpResponse.#ctor(System.String,System.Net.HttpStatusCode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Protocol.Http.Implementation.HttpResponse"/> class.
            </summary>
            <param name="httpVersion">The HTTP version ("HTTP/1.1").</param>
            <param name="code">HTTP status code.</param>
            <param name="reason">Reason to why that specific code was used..</param>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.HttpResponse.Redirect(System.String)">
            <summary>
            Redirect user.
            </summary>
            <param name="uri">Where to redirect to.</param>
            <remarks>
            Any modifications after a redirect will be ignored.
            </remarks>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.HttpResponse.KeepAlive">
            <summary>
            Gets or set if connection should be kept alive.
            </summary>
            <remarks>Keep alive means that the client should not close the connection
            between requests. It makes the HTTP handling a little bit faster.</remarks>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.HttpResponse.Cookies">
            <summary>
            Gets cookies.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.HttpResponse.StatusDescription">
            <summary>
            Gets a motivation to why the specified status code were selected.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.HttpResponse.StatusCode">
            <summary>
            Status code that is sent to the client.
            </summary>
            <remarks>Default is <see cref="F:System.Net.HttpStatusCode.OK"/></remarks>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.HttpResponse.ContentType">
            <summary>
             Gets or sets content type
            </summary>
             <remarks>Only the mime type</remarks>
             <seealso cref="P:Griffin.Networking.Protocol.Http.Protocol.IMessage.ContentEncoding"/>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Implementation.Infrastructure.UrlDecoder">
            <summary>
            Parses query string
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.Infrastructure.UrlDecoder.Parse(System.IO.TextReader,Griffin.Networking.Protocol.Http.IParameterCollection)">
            <summary>
            Parse a query string
            </summary>
            <param name="reader">string to parse</param>
            <param name="parameters">Parameter collection to fill</param>
            <returns>A collection</returns>
            <exception cref="T:System.ArgumentNullException"><c>reader</c> is <c>null</c>.</exception>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.Infrastructure.UrlDecoder.Parse(System.String)">
            <summary>
            Parse a query string
            </summary>
            <param name="queryString">string to parse</param>
            <returns>A collection</returns>
            <exception cref="T:System.ArgumentNullException"><c>queryString</c> is <c>null</c>.</exception>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Protocol.IParameter">
            <summary>
            Parameter in <see cref="T:Griffin.Networking.Protocol.Http.IParameterCollection"/>
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Protocol.IParameter.Add(System.String)">
            <summary>
            Add a new parameter value
            </summary>
            <param name="value">Value to add</param>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Protocol.IParameter.Value">
            <summary>
            Gets *last* value.
            </summary>
            <remarks>
            Parameters can have multiple values. This property will always get the last value in the list.
            </remarks>
            <value>String if any value exist; otherwise <c>null</c>.</value>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Protocol.IParameter.Name">
            <summary>
            Gets or sets name.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Protocol.IParameter.Item(System.Int32)">
            <summary>
            Get one of the values.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Protocol.IParameter.Count">
            <summary>
            Get number of values
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.Parameter.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.Parameter.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.Parameter.Add(System.String)">
            <summary>
            Add a new parameter value
            </summary>
            <param name="value">Value to add</param>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.Parameter.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.Parameter.Values">
            <summary>
            Gets a list of all values.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.Parameter.Value">
            <summary>
            Gets *last* value.
            </summary>
            <remarks>
            Parameters can have multiple values. This property will always get the last value in the list.
            </remarks>
            <value>String if any value exist; otherwise <c>null</c>.</value>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.Parameter.Name">
            <summary>
            Gets or sets name.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.Parameter.Item(System.Int32)">
            <summary>
            Get one of the values.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.Parameter.Count">
            <summary>
            Get number of values
            </summary>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.IParameterCollection">
            <summary>
            Collection of parameters
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.IParameterCollection.Get(System.String)">
            <summary>
            Get a parameter.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.IParameterCollection.Add(System.String,System.String)">
            <summary>
            Add a query string parameter.
            </summary>
            <param name="name">Parameter name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.IParameterCollection.Exists(System.String)">
            <summary>
            Checks if the specified parameter exists
            </summary>
            <param name="name">Parameter name.</param>
            <returns><c>true</c> if found; otherwise <c>false</c>;</returns>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.IParameterCollection.Count">
            <summary>
            Gets number of parameters.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.IParameterCollection.Item(System.String)">
            <summary>
            Gets last value of an parameter.
            </summary>
            <param name="name">Parameter name</param>
            <returns>String if found; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.ParameterCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.ParameterCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.ParameterCollection.Get(System.String)">
            <summary>
            Get a parameter.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.ParameterCollection.Add(System.String,System.String)">
            <summary>
            Add a query string parameter.
            </summary>
            <param name="name">Parameter name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.ParameterCollection.Exists(System.String)">
            <summary>
            Checks if the specified parameter exists
            </summary>
            <param name="name">Parameter name.</param>
            <returns><c>true</c> if found; otherwise <c>false</c>;</returns>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.ParameterCollection.Clear">
            <summary>
            Remove all item
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.ParameterCollection.Count">
            <summary>
            Gets number of parameters.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.ParameterCollection.Item(System.String)">
            <summary>
            Gets last value of an parameter.
            </summary>
            <param name="name">Parameter name</param>
            <returns>String if found; otherwise <c>null</c>.</returns>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Pipeline.Messages.HttpError">
            <summary>
            An error was caught during processing.
            </summary>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Implementation.HttpResponseCookie">
            <summary>
            Response cookies also have an expiration and the path that they are valid for.
            </summary>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Protocol.IResponseCookie">
            <summary>
            Response cookies have to specify where and when they are valid.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Protocol.IResponseCookie.Expires">
            <summary>
            Gets when the cookie expires.
            </summary>
            <remarks><see cref="F:System.DateTime.MinValue"/> means that the cookie expires when the session do so.</remarks>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Protocol.IResponseCookie.Path">
            <summary>
            Gets path that the cookie is valid under.
            </summary>
            <remarks><c>null</c> means not specified</remarks>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.HttpResponseCookie.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Protocol.Http.Implementation.HttpResponseCookie"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.HttpResponseCookie.Expires">
            <summary>
            Gets when the cookie expires.
            </summary>
            <remarks><see cref="F:System.DateTime.MinValue"/> means that the cookie expires when the session do so.</remarks>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.HttpResponseCookie.Path">
            <summary>
            Gets path that the cookie is valid under.
            </summary>
            <remarks><c>null</c> means not specified.</remarks>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Pipeline.Messages.ReceivedHttpRequest">
            <summary>
            Received a new http request.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Pipeline.Messages.ReceivedHttpRequest.#ctor(Griffin.Networking.Protocol.Http.Protocol.IRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Protocol.Http.Pipeline.Messages.ReceivedHttpRequest"/> class.
            </summary>
            <param name="httpRequest">The HTTP request.</param>
            <exception cref="T:System.ArgumentNullException">httpRequest</exception>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Pipeline.Messages.ReceivedHttpRequest.HttpRequest">
            <summary>
            Gets the received HTTP request.
            </summary>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Pipeline.Messages.SendHttpResponse">
            <summary>
            Sned a new HTTP resposne
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Pipeline.Messages.SendHttpResponse.#ctor(Griffin.Networking.Protocol.Http.Protocol.IRequest,Griffin.Networking.Protocol.Http.Protocol.IResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Protocol.Http.Pipeline.Messages.SendHttpResponse"/> class.
            </summary>
            <param name="request">The request that the response is for.</param>
            <param name="response">Response to send.</param>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Pipeline.Messages.SendHttpResponse.Request">
            <summary>
            Gets request that the response is for
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Pipeline.Messages.SendHttpResponse.Response">
            <summary>
            Gets actual response
            </summary>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.NameValueParser">
            <summary>
            Parses a namevalue collection
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.NameValueParser.Parse(System.String,Griffin.Networking.Protocol.Http.IParameterCollection)">
            <summary>
            Parse string
            </summary>
            <param name="value">contains "a=b,c=d" etc</param>
            <param name="target">Collection to fill with the values</param>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Protocol.IHttpFile">
            <summary>
            A file included in a HTTP request.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Protocol.IHttpFile.ContentType">
            <summary>
            Gets or sets content type.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Protocol.IHttpFile.Name">
            <summary>
            Gets or sets name in form.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Protocol.IHttpFile.OriginalFileName">
            <summary>
            Gets or sets name original file name
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Protocol.IHttpFile.TempFileName">
            <summary>
            Gets or sets filename for locally stored file.
            </summary>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Implementation.HttpFile">
            <summary>
            A HTTP file in a request.
            </summary>
            <remarks>The temporary file will be deleted when the request/response ends.</remarks>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Implementation.HttpFile.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.HttpFile.Name">
            <summary>
            Gets or sets form element name
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.HttpFile.OriginalFileName">
            <summary>
            Gets or sets client side file name
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.HttpFile.ContentType">
            <summary>
            Gets or sets mime content type
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Implementation.HttpFile.TempFileName">
            <summary>
            Gets or sets full path to local file
            </summary>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Services.Authentication.IAuthenticator">
            <summary>
            Used to authenticate the user.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Services.Authentication.IAuthenticator.CreateChallenge(Griffin.Networking.Protocol.Http.Protocol.IRequest,Griffin.Networking.Protocol.Http.Protocol.IResponse)">
            <summary>
            Create a WWW-Authenticate header
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Services.Authentication.IAuthenticator.Authenticate(Griffin.Networking.Protocol.Http.Protocol.IRequest)">
            <summary>
            Authorize a request.
            </summary>
            <param name="request">Request being authenticated</param>
            <returns>Authenticated user if successful; otherwise null.</returns>
            <exception cref="T:Griffin.Networking.Protocol.Http.HttpException">403 Forbidden if the nonce is incorrect.</exception>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Services.Authentication.IAuthenticator.AuthenticationScheme">
            <summary>
            Gets name of the authentication scheme
            </summary>
            <remarks>"BASIC", "DIGEST" etc.</remarks>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Services.Authentication.BasicAuthentication.CreateChallenge(Griffin.Networking.Protocol.Http.Protocol.IRequest,Griffin.Networking.Protocol.Http.Protocol.IResponse)">
            <summary>
            Create a WWW-Authenticate header
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Services.Authentication.BasicAuthentication.Authenticate(Griffin.Networking.Protocol.Http.Protocol.IRequest)">
            <summary>
            Authorize a request.
            </summary>
            <param name="request">Request being authenticated</param>
            <returns>Authenticated user if successful; otherwise null.</returns>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Services.Authentication.BasicAuthentication.Scheme">
            <summary>
            Gets authenticator scheme
            </summary>
            <value></value>
            <example>
            digest
            </example>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Services.Authentication.BasicAuthentication.AuthenticationScheme">
            <summary>
            Gets name of the authentication scheme
            </summary>
            <remarks>"BASIC", "DIGEST" etc.</remarks>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Services.Authentication.DigestAuthenticator">
            <summary>
            Implements Digest authentication.
            </summary>
            <remarks>Read RFC 2617 for more information</remarks>
        </member>
        <member name="F:Griffin.Networking.Protocol.Http.Services.Authentication.DigestAuthenticator.DisableNonceCheck">
            <summary>
            Used by test classes to be able to use hardcoded values
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Services.Authentication.DigestAuthenticator.#ctor(Griffin.Networking.Protocol.Http.Services.Authentication.IRealmRepository,Griffin.Networking.Protocol.Http.Services.Authentication.IAccountStorage)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Protocol.Http.Services.Authentication.DigestAuthenticator"/> class.
            </summary>
            <param name="realmRepository">Used to lookup the realm for a HTTP request</param>
            <param name="userService">Supplies users during authentication process.</param>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Services.Authentication.DigestAuthenticator.CreateChallenge(Griffin.Networking.Protocol.Http.Protocol.IRequest,Griffin.Networking.Protocol.Http.Protocol.IResponse)">
            <summary>
            Create a WWW-Authenticate header
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Services.Authentication.DigestAuthenticator.Encrypt(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Encrypts parameters into a Digest string
            </summary>
            <param name="realm">Realm that the user want to log into.</param>
            <param name="userName">User logging in</param>
            <param name="password">Users password.</param>
            <param name="method">HTTP method.</param>
            <param name="uri">Uri/domain that generated the login prompt.</param>
            <param name="qop">Quality of Protection.</param>
            <param name="nonce">"Number used ONCE"</param>
            <param name="nc">Hexadecimal request counter.</param>
            <param name="cnonce">"Client Number used ONCE"</param>
            <returns>Digest encrypted string</returns>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Services.Authentication.DigestAuthenticator.Encrypt(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="ha1">Md5 hex encoded "userName:realm:password", without the quotes.</param>
            <param name="ha2">Md5 hex encoded "method:uri", without the quotes</param>
            <param name="qop">Quality of Protection</param>
            <param name="nonce">"Number used ONCE"</param>
            <param name="nc">Hexadecimal request counter.</param>
            <param name="cnonce">Client number used once</param>
            <returns></returns>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Services.Authentication.DigestAuthenticator.GetMd5HashBinHex(System.String)">
            <summary>
            Gets the Md5 hash bin hex2.
            </summary>
            <param name="toBeHashed">To be hashed.</param>
            <returns></returns>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Services.Authentication.DigestAuthenticator.Scheme">
            <summary>
            Gets authenticator scheme
            </summary>
            <value></value>
            <example>
            digest
            </example>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Services.Authentication.DigestAuthenticator.AuthenticationScheme">
            <summary>
            Gets name of the authentication scheme
            </summary>
            <remarks>"BASIC", "DIGEST" etc.</remarks>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Services.Authentication.Digest.Nonce">
            <summary>
            Used to keep track of a Digest authentication nonce
            </summary>
            <remarks>Only five attempts may be made.</remarks>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Services.Authentication.Digest.Nonce.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Protocol.Http.Services.Authentication.Digest.Nonce"/> class.
            </summary>
            <param name="expires">When nonce expires.</param>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Services.Authentication.Digest.Nonce.Validate(System.Int32)">
            <summary>
            Check if the nonce can be used.
            </summary>
            <param name="value"></param>
            <returns>true if counter is currently unused and within the range; otherwise false;</returns>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Services.Authentication.Digest.Nonce.PassedCounts">
            <summary>
            Gets all passed counts.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Services.Authentication.Digest.Nonce.LastUpdate">
            <summary>
            Gets time for last attempt.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Services.Authentication.Digest.Nonce.Expired">
            <summary>
            Gets if nonce has expired.
            </summary>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Services.Authentication.Digest.NonceService">
            <summary>
            Monitors all nonces.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Services.Authentication.Digest.NonceService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Protocol.Http.Services.Authentication.Digest.NonceService"/> class.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Services.Authentication.Digest.NonceService.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Protocol.Http.Services.Authentication.Digest.NonceService"/> class.
            </summary>
            <param name="expiresTimeout">How long a nonce is valid, default is 15 seconds.</param>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Services.Authentication.Digest.NonceService.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Services.Authentication.Digest.NonceService.IsValid(System.String,System.Int32)">
            <summary>
            Checks if a nonce is valid
            </summary>
            <param name="value">nonce value</param>
            <param name="counter">nc counter</param>
            <returns>true if nonce is valid; otherwise false.</returns>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Services.Authentication.Digest.NonceService.CreateNonce">
            <summary>
            Create a new nonce
            </summary>
            <returns>Created nonce.</returns>
            <remarks>Valid Time span is configured in the <see cref="M:Griffin.Networking.Protocol.Http.Services.Authentication.Digest.NonceService.#ctor(System.TimeSpan)"/> constructor. Default time is 15 seconds.</remarks>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Services.Authentication.Digest.NonceService.Sweep(System.Object)">
            <summary>
            Remove expired nonces.
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Services.Authentication.HostAsRealmRepository">
            <summary>
            Uses <c>request.Uri.Host</c> as realm.
            </summary>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Services.Authentication.IRealmRepository">
            <summary>
            Returns the realm for a request.
            </summary>
            <remarks>Realms are used during authentication</remarks>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Services.Authentication.IRealmRepository.GetRealm(Griffin.Networking.Protocol.Http.Protocol.IRequest)">
            <summary>
            Gets the realm for a request
            </summary>
            <param name="request">Request which realm we want to get</param>
            <returns>The realm that the request belongs to</returns>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Services.Authentication.HostAsRealmRepository.GetRealm(Griffin.Networking.Protocol.Http.Protocol.IRequest)">
            <summary>
            Gets the realm for a request
            </summary>
            <param name="request">Request which realm we want to get</param>
            <returns>The realm that the request belongs to</returns>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Services.Authentication.IAccountStorage">
            <summary>
            Provider returning user to be authenticated.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Services.Authentication.IAccountStorage.Lookup(System.String,System.Uri)">
            <summary>
            Lookups the specified user
            </summary>
            <param name="userName">User name.</param>
            <param name="host">Typically web server domain name.</param>
            <returns>User if found; otherwise <c>null</c>.</returns>
            <remarks>
            User name can basically be anything. For instance name entered by user when using
            basic or digest authentication, or SID when using Windows authentication.
            </remarks>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Services.Authentication.IAuthenticationUser">
            <summary>
            User information used during authentication process.
            </summary>
            <remarks>The </remarks>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Services.Authentication.IAuthenticationUser.Username">
            <summary>
            Gets or sets user name used during authentication.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Services.Authentication.IAuthenticationUser.Password">
            <summary>
            Gets or sets unencrypted password.
            </summary>
            <remarks>
            Password as clear text. You could use <see cref="P:Griffin.Networking.Protocol.Http.Services.Authentication.IAuthenticationUser.HA1"/> instead if your passwords
            are encrypted in the database.
            </remarks>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Services.Authentication.IAuthenticationUser.HA1">
            <summary>
            Gets or sets HA1 hash.
            </summary>
            <remarks>
            <para>
            Digest authentication requires clear text passwords to work. If you
            do not have that, you can store a HA1 hash in your database (which is part of
            the Digest authentication process).
            </para>
            <para>
            A HA1 hash is simply a Md5 encoded string: "UserName:Realm:Password". The quotes should
            not be included. Realm is the currently requested Host (as in <c>Request.Headers["host"]</c>).
            </para>
            <para>
            Leave the string as <c>null</c> if you are not using HA1 hashes.
            </para>
            </remarks>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Services.Authentication.IUserWithRoles">
            <summary>
            Used to be able to generate <see cref="T:System.Security.Principal.IPrincipal"/> directly.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Services.Authentication.IUserWithRoles.RoleNames">
            <summary>
            Get a list of all roles
            </summary>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Services.Authentication.IPrincipalFactory">
            <summary>
            Used to create <see cref="T:System.Security.Principal.IPrincipal"/>
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Services.Authentication.IPrincipalFactory.Create(Griffin.Networking.Protocol.Http.Services.Authentication.PrincipalFactoryContext)">
            <summary>
            Create a new prinicpal
            </summary>
            <param name="context">Context used to identify the user.</param>
            <returns>Principal to use</returns>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Services.Authentication.PrincipalFactoryContext">
            <summary>
            Context for <see cref="T:Griffin.Networking.Protocol.Http.Services.Authentication.IPrincipalFactory"/>.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Services.Authentication.PrincipalFactoryContext.#ctor(Griffin.Networking.Protocol.Http.Protocol.IRequest,Griffin.Networking.Protocol.Http.Services.Authentication.IAuthenticationUser)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Protocol.Http.Services.Authentication.PrincipalFactoryContext"/> class.
            </summary>
            <param name="request">The request.</param>
            <param name="user">The user.</param>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Services.Authentication.PrincipalFactoryContext.User">
            <summary>
            Gets the user which was provided by the <see cref="T:Griffin.Networking.Protocol.Http.Services.Authentication.IAccountStorage"/>.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Services.Authentication.PrincipalFactoryContext.Request">
            <summary>
            Gets the HTTP request.
            </summary>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Services.Authentication.SingleRealmRepository">
            <summary>
            Uses a single realm for all requests.
            </summary>
            <example>
            <code>
            var digestAuthenticator = new DigestAuthenticator(new SingleRealmRepository("DragonsDen"), _myUserService);
            </code>
            </example>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Services.Authentication.SingleRealmRepository.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Protocol.Http.Services.Authentication.SingleRealmRepository"/> class.
            </summary>
            <param name="name">Name of the realm.</param>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Services.Authentication.SingleRealmRepository.GetRealm(Griffin.Networking.Protocol.Http.Protocol.IRequest)">
            <summary>
            Gets the realm for a request
            </summary>
            <param name="request">Request which realm we want to get</param>
            <returns>The realm that the request belongs to</returns>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Services.BodyDecoders.CompositeBodyDecoder">
            <summary>
            Can provide one or more decoders.
            </summary>
            <remarks>The default implementation constructor uses <see cref="T:Griffin.Networking.Protocol.Http.Services.BodyDecoders.UrlFormattedDecoder"/> and <see cref="T:Griffin.Networking.Protocol.Http.Services.BodyDecoders.MultipartDecoder"/></remarks>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Services.IBodyDecoder">
            <summary>
            Decodes body stream into the Form/Files properties.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Services.IBodyDecoder.Decode(Griffin.Networking.Protocol.Http.Protocol.IRequest)">
            <summary>
            Decode body stream
            </summary>
            <param name="message">Contains the body to decode.</param>
            <exception cref="T:Griffin.Networking.Protocol.Http.BadRequestException">Body format is invalid for the specified content type.</exception>
            <returns><c>true</c> if the body was decoded; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Services.BodyDecoders.CompositeBodyDecoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Protocol.Http.Services.BodyDecoders.CompositeBodyDecoder"/> class.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Services.BodyDecoders.CompositeBodyDecoder.Decode(Griffin.Networking.Protocol.Http.Protocol.IRequest)">
            <summary>
            Parses the specified message.
            </summary>
            <param name="message">The message.</param>
            <exception cref="T:System.FormatException">Body format is invalid for the specified content type.</exception>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Services.BodyDecoders.CompositeBodyDecoder.Add(System.String,Griffin.Networking.Protocol.Http.Services.IBodyDecoder)">
            <summary>
            Add another handlers.
            </summary>
            <param name="mimeType">Mime type</param>
            <param name="decoder">The decoder implementation. Must be thread safe.</param>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Services.BodyDecoders.Mono.HttpMultipart">
             <summary>
             Stream-based multipart handling.
            
             In this incarnation deals with an HttpInputStream as we are now using
             IntPtr-based streams instead of byte [].   In the future, we will also
             send uploads above a certain threshold into the disk (to implement
             limit-less HttpInputFiles). 
             </summary>
             <remarks>
             Taken from HttpRequest in mono (http://www.mono-project.com)
             </remarks>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Services.BodyDecoders.MultipartDecoder">
            <summary>
            Decodes multipart files.
            </summary>
        </member>
        <member name="F:Griffin.Networking.Protocol.Http.Services.BodyDecoders.MultipartDecoder.FormData">
            <summary>
            form-data
            </summary>
        </member>
        <member name="F:Griffin.Networking.Protocol.Http.Services.BodyDecoders.MultipartDecoder.MimeType">
            <summary>
            multipart/form-data
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Services.BodyDecoders.MultipartDecoder.ContentTypes">
            <summary>
            All content types that the decoder can parse.
            </summary>
            <returns>A collection of all content types that the decoder can handle.</returns>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Services.BodyDecoders.UrlFormattedDecoder">
            <summary>
            Decodes URL encoded values.
            </summary>
        </member>
        <member name="F:Griffin.Networking.Protocol.Http.Services.BodyDecoders.UrlFormattedDecoder.MimeType">
            <summary>
            The mimetype that this decoder is for.
            </summary>
            <value>application/x-www-form-urlencoded</value>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Services.BodyDecoders.UrlFormattedDecoder.Decode(Griffin.Networking.Protocol.Http.Protocol.IRequest)">
            <summary>
            Decode body stream
            </summary>
            <param name="message">Contains the body to decode.</param>
            <exception cref="T:System.FormatException">Body format is invalid for the specified content type.</exception>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Services.BodyDecoders.UrlFormattedDecoder.ContentTypes">
            <summary>
            All content types that the decoder can parse.
            </summary>
            <returns>A collection of all content types that the decoder can handle.</returns>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Services.Errors.ErrorFormatterContext">
            <summary>
            Context for the error formatters.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Services.Errors.ErrorFormatterContext.#ctor(System.Exception,Griffin.Networking.Protocol.Http.Protocol.IRequest,Griffin.Networking.Protocol.Http.Protocol.IResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Protocol.Http.Services.Errors.ErrorFormatterContext"/> class.
            </summary>
            <param name="exception">The exception.</param>
            <param name="request">The request.</param>
            <param name="response">The response.</param>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Services.Errors.ErrorFormatterContext.Exception">
            <summary>
            Gets thrown exception
            </summary>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Services.Errors.ErrorFormatterContext.Response">
            <summary>
            Gets the response which will be sent back
            </summary>
            <remarks>The status code corresponds to the thrown exception. Fill the body with your error message.</remarks>
        </member>
        <member name="P:Griffin.Networking.Protocol.Http.Services.Errors.ErrorFormatterContext.Request">
            <summary>
            Gets request which was handled when the error was generated.
            </summary>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Services.Errors.IErrorFormatter">
            <summary>
            Takes a <see cref="T:System.Exception"/> and formats the <see cref="T:Griffin.Networking.Protocol.Http.Protocol.IResponse"/> accordingly.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Services.Errors.IErrorFormatter.Format(Griffin.Networking.Protocol.Http.Services.Errors.ErrorFormatterContext)">
            <summary>
            Format the response into something that the user understands.
            </summary>
            <param name="context">Context providing information for the error message generation</param>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Services.Errors.NamespaceDoc">
            <summary>
            Classes used to format the response for uncaught exceptions before the response is sent back to the client.
            </summary>
        </member>
        <member name="T:Griffin.Networking.Protocol.Http.Services.Errors.SimpleErrorFormatter">
            <summary>
            Used to format all HTTP error messages
            </summary>
        </member>
        <member name="M:Griffin.Networking.Protocol.Http.Services.Errors.SimpleErrorFormatter.Format(Griffin.Networking.Protocol.Http.Services.Errors.ErrorFormatterContext)">
            <summary>
            Format the response into something that the user understands.
            </summary>
            <param name="context">Context providing information for the error message generation</param>
        </member>
    </members>
</doc>
